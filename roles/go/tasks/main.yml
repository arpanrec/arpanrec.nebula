---
- name: Golang | Prerequisites
  ansible.builtin.import_tasks: prerequisites.yml

- name: Golang | Get Latest Version
  ansible.builtin.set_fact:
      go_tmp_version_details: "{{ lookup('arpanrec.nebula.version_db', 'go', go_rv_version=go_rv_version) }}"

- name: Golang | Get downloaded file stat
  ansible.builtin.stat:
      path: "{{ go_rv_tarball_download_path }}"
  register: pv_ua_golang_downloaded_file_stat

- name: Golang | Newly downloaded | Create Download Directory
  ansible.builtin.file:
      path: "{{ go_rv_tmp_dir }}"
      state: directory
      mode: "0700"

- name: Golang | Newly downloaded
  when: not pv_ua_golang_downloaded_file_stat.stat.exists
  block:
      - name: "Golang | Newly downloaded | Download tarball"
        ansible.builtin.get_url:
            url: "{{ go_tmp_version_details.download_link }}"
            checksum: "{{ go_tmp_version_details.checksum | default(omit) }}"
            dest: "{{ go_rv_tarball_download_path }}"
            mode: "0700"

      - name: Golang | Newly downloaded | Remove old install directory
        ansible.builtin.file:
            path: "{{ go_rv_install_path }}"
            state: absent

  rescue:
      - name: Golang | Newly downloaded | Delete Tarball
        ansible.builtin.file:
            path: "{{ go_rv_tarball_download_path }}"
            state: absent

      - name: Golang | Newly downloaded | Fail
        ansible.builtin.fail:
            msg: "Failed to download Golang tarball"

- name: Golang | Create install directory
  ansible.builtin.file:
      path: "{{ go_rv_install_path }}"
      state: directory
      mode: "0700"

- name: Golang | Newly downloaded | Unarchive the tarball
  ansible.builtin.unarchive:
      src: "{{ go_rv_tarball_download_path }}"
      dest: "{{ go_rv_install_path }}"
      extra_opts: [--strip-components=1]
      remote_src: true

- name: Golang | Newly downloaded | Install global packages
  ansible.builtin.command:
      cmd: "{{ go_rv_install_path }}/bin/go install {{ item }}"
      chdir: "{{ go_rv_install_path }}"
  loop: "{{ go_rv_global_installs }}"
  when: go_rv_global_installs | length > 0
  environment:
      PATH: "{{ go_rv_install_path }}/bin:{{ ansible_env.PATH }}"
  register: go_rv_global_installs_result
  changed_when: go_rv_global_installs_result.stdout_lines | length != 0

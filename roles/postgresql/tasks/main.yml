---
- name: Postgresql | Verify cluster name.
  ansible.builtin.fail:
      msg: "The 'postgresql_cluster' variable must be set and not include any spaces or special characters.
          https://www.postgresql.org/message-id/E7F3EFD1-82A2-47BB-833D-EFA6BBD66969%40dnservices.co.za"
  when: postgresql_cluster is not defined or postgresql_cluster | length < 1
      or postgresql_cluster is search("([^a-z0-9_])")
      or postgresql_cluster is search(" ")

- name: Postgresql | Install Client.
  ansible.builtin.import_tasks: install-client.yml

- name: Postgresql | Install packages.
  ansible.builtin.apt:
      name:
          - postgresql-{{ postgresql_version }}
          - postgresql-contrib-{{ postgresql_version }}
      state: present
      update_cache: true

- name: Postgresql | Populate service facts.
  when: false
  ansible.builtin.service_facts:

- name: Postgresql | Disable existing postgresql services.
  ansible.builtin.systemd_service:
      name: "{{ __postgresql_existing_service }}"
      state: stopped
      enabled: false
  when: false
  # when: postgresql_pg_ctlcluster_systemd_service_name in __postgresql_existing_service
  #     or
  #     'postgresql.service' in __postgresql_existing_service
  loop: "{{ __postgresql_known_systemd_services | map(attribute='name') }}"
  loop_control:
      loop_var: __postgresql_existing_service
  vars:
      __postgresql_known_systemd_services: "{{ ansible_facts['services'].values()
          | selectattr('source', 'equalto', 'systemd')
          | selectattr('state', 'equalto', 'running')
          + ansible_facts['services'].values()
          | selectattr('source', 'equalto', 'systemd')
          | selectattr('status', 'equalto', 'enabled') }}"

- name: Postgresql | Generate locales
  community.general.locale_gen:
      name: "{{ postgresql_locales }}"
      state: present
  notify:
      - Restart postgresql handler

- name: Postgresql | Make sure postgresql group exists
  ansible.builtin.group:
      name: "{{ postgresql_service_group }}"
      system: true

- name: Postgresql | Make sure postgresql user exists
  ansible.builtin.user:
      name: "{{ postgresql_service_user }}"
      create_home: false
      move_home: false
      home: "{{ postgresql_service_user_home }}"
      group: "{{ postgresql_service_group }}"
      groups:
          - ssl-cert
      system: true
      shell: /bin/bash
      comment: PostgreSQL administrator

- name: Postgresql | Create postgresql required resource and data directories.
  ansible.builtin.file:
      path: "{{ item.path }}"
      state: directory
      mode: "{{ item.mode | default('0755') }}"
      owner: "{{ postgresql_service_user }}"
      group: "{{ postgresql_service_group }}"
  loop:
      - path: "{{ postgresql_default_conf_file | dirname }}"
      - path: "{{ postgresql_pg_ctlcluster_start_file | dirname }}"
      - path: "{{ postgresql_pg_ctlcluster_pg_ctl_file | dirname }}"
      - path: "{{ postgresql_conf_file | dirname }}"
      - path: "{{ postgresql_data_directory }}"
        mode: "0700"
      - path: "{{ postgresql_external_pid_file | dirname }}"
        mode: "0750"
      - path: "{{ postgresql_hba_file | dirname }}"
      - path: "{{ postgresql_ident_file | dirname }}"

- name: Postgresql | Create postgresql socket directories.
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: "{{ postgresql_unix_socket_permissions }}"
      group: "{{ postgresql_unix_socket_group }}"
  loop: "{{ postgresql_unix_socket_directories }}"
  notify:
      - Restart postgresql handler

- name: Postgresql | Create postgresql hba_file.
  community.postgresql.postgresql_pg_hba:
      dest: "{{ postgresql_hba_file }}"
      mode: "0600"
      owner: "{{ postgresql_service_user }}"
      group: "{{ postgresql_service_group }}"
      backup: false
      rules: "{{ postgresql_hba_rules }}"
      sort_rules: true
      state: present
      overwrite: true
      rules_behavior: conflict
      create: true
  notify:
      - Restart postgresql handler

- name: Postgresql | Extra hba_file entries.
  community.postgresql.postgresql_pg_hba:
      dest: "{{ postgresql_hba_file }}"
      mode: "0600"
      owner: "{{ postgresql_service_user }}"
      group: "{{ postgresql_service_group }}"
      backup: false
      sort_rules: false
      state: present
      overwrite: false
      rules_behavior: conflict
      create: false
      contype: "{{ item.contype | default(omit) }}"
      databases: "{{ item.databases | default(omit) }}"
      users: "{{ item.users | default(omit) }}"
      method: "{{ item.method | default(omit) }}"
      address: "{{ item.address | default(omit) }}"
      options: "{{ item.options | default(omit) }}"
      netmask: "{{ item.netmask | default(omit) }}"
  loop: "{{ postgresql_extra_hba_rules }}"
  notify:
      - Restart postgresql handler

- name: Postgresql | Create postgresql ident_file.
  ansible.builtin.copy:
      src: "files/pg_ident.conf"
      dest: "{{ postgresql_ident_file }}"
      mode: "0600"
      owner: "{{ postgresql_service_user }}"
      group: "{{ postgresql_service_group }}"
      remote_src: false
  notify:
      - Restart postgresql handler

- name: Postgresql | Write pg_ctlcluster files.
  ansible.builtin.copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: "0644"
      owner: "{{ postgresql_service_user }}"
      group: "{{ postgresql_service_group }}"
      backup: false
  loop:
      - src: "files/pg_ctl.conf"
        dest: "{{ postgresql_pg_ctlcluster_pg_ctl_file }}"
      - src: "files/start.conf"
        dest: "{{ postgresql_pg_ctlcluster_start_file }}"
  notify:
      - Restart postgresql handler

- name: Postgresql | Include ansible config overwrite directory.
  community.general.ini_file:
      path: "{{ postgresql_default_conf_file }}"
      mode: "0644"
      owner: "{{ postgresql_service_user }}"
      group: "{{ postgresql_service_group }}"
      option: "include"
      value: "'{{ postgresql_conf_file }}'"
      no_extra_spaces: false
      backup: false
      create: true
  notify:
      - Restart postgresql handler

- name: Postgresql | Overwrite postgresql configurations.
  community.general.ini_file:
      path: "{{ postgresql_conf_file }}"
      mode: "0644"
      owner: "{{ postgresql_service_user }}"
      group: "{{ postgresql_service_group }}"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
      no_extra_spaces: false
      backup: false
      create: true
  loop: "{{ postgresql_conf_options + postgresql_extra_conf_options }}"
  notify:
      - Restart postgresql handler

- name: Postgresql | SSL.
  when: postgresql_ssl_cert_pem_content is defined and postgresql_ssl_cert_pem_content | length > 1
      and postgresql_ssl_key_pem_content is defined and postgresql_ssl_key_pem_content | length > 1
  block:
      - name: Postgresql | SSL | Create SSL directories.
        ansible.builtin.file:
            path: "{{ item.path }}"
            state: directory
            mode: "{{ item.mode | default('0755') }}"
            owner: "{{ postgresql_service_user }}"
            group: "{{ postgresql_service_group }}"
        loop:
            - path: "{{ postgresql_ssl_cert_file | dirname }}"
            - path: "{{ postgresql_ssl_key_file | dirname }}"

      - name: Postgresql | SSL | Write DB Server Certificates.
        ansible.builtin.copy:
            content: "{{ item.content }}"
            dest: "{{ item.dest }}"
            mode: "{{ item.mode }}"
            owner: "{{ postgresql_service_user }}"
            group: "{{ postgresql_service_group }}"
            backup: false
        loop:
            - content: "{{ postgresql_ssl_cert_pem_content }}"
              dest: "{{ postgresql_ssl_cert_file }}"
              mode: "0644"
            - content: "{{ postgresql_ssl_key_pem_content }}"
              dest: "{{ postgresql_ssl_key_file }}"
              mode: "0600"
        notify:
            - Restart postgresql handler

      - name: Postgresql | SSL | Overwrite postgresql configurations.
        community.general.ini_file:
            path: "{{ postgresql_conf_file }}"
            mode: "0644"
            owner: "{{ postgresql_service_user }}"
            group: "{{ postgresql_service_group }}"
            option: "{{ item.option }}"
            value: "{{ item.value }}"
            no_extra_spaces: false
            backup: false
            create: true
        loop:
            - option: ssl
              value: "'on'"
            - option: ssl_cert_file
              value: "'{{ postgresql_ssl_cert_file }}'"
            - option: ssl_key_file
              value: "'{{ postgresql_ssl_key_file }}'"
        notify:
            - Restart postgresql handler

      - name: Postgresql | SSL | Client CA
        when: postgresql_ssl_ca_pem_content is defined and postgresql_ssl_ca_pem_content | length > 1
        block:
            - name: Postgresql | SSL | Client CA | Create SSL directories.
              ansible.builtin.file:
                  path: "{{ postgresql_ssl_ca_file | dirname }}"
                  state: directory
                  mode: "{{ '0755' }}"
                  owner: "{{ postgresql_service_user }}"
                  group: "{{ postgresql_service_group }}"

            - name: Postgresql | SSL | Client CA | Write DB CA certificate.
              ansible.builtin.copy:
                  content: "{{ postgresql_ssl_ca_pem_content }}"
                  dest: "{{ postgresql_ssl_ca_file }}"
                  mode: "0644"
                  owner: "{{ postgresql_service_user }}"
                  group: "{{ postgresql_service_group }}"
                  backup: false
              notify:
                  - Restart postgresql handler

            - name: Postgresql | SSL | Client CA | Overwrite postgresql configurations.
              community.general.ini_file:
                  path: "{{ postgresql_conf_file }}"
                  mode: "0644"
                  owner: "{{ postgresql_service_user }}"
                  group: "{{ postgresql_service_group }}"
                  option: "ssl_ca_file"
                  value: "'{{ postgresql_ssl_ca_file }}'"
                  no_extra_spaces: false
                  backup: false
                  create: true
              notify:
                  - Restart postgresql handler

- name: Postgresql | Ensure PostgreSQL database is initialized.
  ansible.builtin.command:
      argv:
          - "{{ postgresql_bin_directory }}/initdb"
          - -D
          - "{{ postgresql_data_directory }}"
          - "--username={{ postgresql_super_user }}"
      creates: "{{ postgresql_data_directory }}/PG_VERSION"
  become: true
  become_user: "{{ postgresql_service_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
      ansible_ssh_pipelining: true
  notify:
      - Restart postgresql handler

- name: Postgresql | Flush handlers.
  ansible.builtin.meta: flush_handlers

- name: Postgresql | Enable postgresql systemd service.
  ansible.builtin.systemd_service:
      name: "{{ postgresql_pg_ctlcluster_systemd_service_name }}"
      enabled: true
      state: started
      daemon_reload: true

- name: Postgresql | Reset superuser password.
  when: postgresql_super_user_password is defined and postgresql_super_user_password | length > 1
  community.postgresql.postgresql_user:
      name: "{{ postgresql_super_user }}"
      password: "{{ postgresql_super_user_password }}"
      login_db: "{{ postgresql_super_user_db }}"
      login_user: "{{ postgresql_super_user }}"
      login_port: "{{ postgresql_port }}"
      login_unix_socket: "{{ postgresql_unix_socket_directories[0] }}"
  become: true
  become_user: "{{ postgresql_service_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
      ansible_ssh_pipelining: true
  environment:
      PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256')
          | ternary('-c password_encryption=scram-sha-256', '') }}"

- name: Postgresql | Ensure PostgreSQL users are present.
  community.postgresql.postgresql_user:
      name: "{{ item.name }}"
      password: "{{ item.password | default(omit) }}"
      login_db: "{{ item.login_db | default(postgresql_super_user_db) }}"
      login_host: "{{ item.login_host | default('localhost') }}"
      login_password: "{{ item.login_password | default(omit) }}"
      login_user: "{{ item.login_user | default(postgresql_super_user) }}"
      login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
      login_port: "{{ item.port | default(postgresql_port) }}"
  with_items: "{{ postgresql_users }}"
  become: true
  become_user: "{{ postgresql_service_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
      ansible_ssh_pipelining: true
  environment:
      PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256')
          | ternary('-c password_encryption=scram-sha-256', '') }}"

- name: Postgresql | Ensure PostgreSQL databases are present.
  community.postgresql.postgresql_db:
      name: "{{ item.name }}"
      lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
      lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
      encoding: "{{ item.encoding | default('UTF-8') }}"
      template: "{{ item.template | default('template0') }}"
      login_host: "{{ item.login_host | default('localhost') }}"
      login_password: "{{ item.login_password | default(omit) }}"
      login_user: "{{ item.login_user | default(postgresql_super_user) }}"
      login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
      login_port: "{{ item.login_port | default(postgresql_port) }}"
      owner: "{{ item.owner | default(postgresql_super_user) }}"
      state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_databases }}"
  become: true
  become_user: "{{ postgresql_service_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
      ansible_ssh_pipelining: true

- name: Postgresql | Ensure PostgreSQL users are configured correctly.
  community.postgresql.postgresql_user:
      name: "{{ item.name }}"
      password: "{{ item.password | default(omit) }}"
      encrypted: "{{ item.encrypted | default(omit) }}"
      role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
      login_db: "{{ item.login_db | default(postgresql_super_user_db) }}"
      login_host: "{{ item.login_host | default('localhost') }}"
      login_password: "{{ item.login_password | default(omit) }}"
      login_user: "{{ item.login_user | default(postgresql_super_user) }}"
      login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
      login_port: "{{ item.login_port | default(postgresql_port) }}"
      state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_users }}"
  become: true
  become_user: "{{ postgresql_service_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
      ansible_ssh_pipelining: true
  environment:
      PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256')
          | ternary('-c password_encryption=scram-sha-256', '') }}"

- name: Postgresql | Ensure PostgreSQL users do not use deprecated privileges settings
  ansible.builtin.debug:
      msg: "Postgresql user {{ item.name }} uses deprecated privileges settings.
          See https://github.com/geerlingguy/ansible-role-postgresql/issues/254"
  with_items: "{{ postgresql_users }}"
  loop_control:
      label: "{{ item.name }}"
  when: item.priv is defined

- name: Postgresql | Ensure PostgreSQL users privileges are configured correctly.
  community.postgresql.postgresql_privs:
      roles: "{{ item.roles }}"
      privs: "{{ item.privs | default(omit) }}"
      type: "{{ item.type | default(omit) }}"
      objs: "{{ item.objs | default(omit) }}"
      schema: "{{ item.schema | default(omit) }}"
      session_role: "{{ item.session_role | default(omit) }}"
      login_db: "{{ item.login_db | default(postgresql_super_user_db) }}"
      login_host: "{{ item.login_host | default('localhost') }}"
      login_password: "{{ item.login_password | default(omit) }}"
      login_user: "{{ item.login_user | default(postgresql_super_user) }}"
      login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
      login_port: "{{ item.login_port | default(postgresql_port) }}"
      state: "{{ item.state | default('present') }}"
      fail_on_role: "{{ item.fail_on_role | default(true) }}"
      grant_option: "{{ item.grant_option | default(omit) }}"
      target_roles: "{{ item.target_roles | default(omit) }}"
  with_items: "{{ postgresql_privs }}"
  become: true
  become_user: "{{ postgresql_service_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
      ansible_ssh_pipelining: true
  environment:
      PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256')
          | ternary('-c password_encryption=scram-sha-256', '') }}"

- name: Postgresql | Gather the package facts.
  ansible.builtin.package_facts:
      manager: auto

- name: Postgresql | Allow ufw port.
  when: "'ufw' in ansible_facts.packages and ansible_facts.packages['ufw'] | length > 0"
  community.general.ufw:
      state: enabled
      port: "{{ postgresql_port }}"
      comment: Postgresql managed by ansible easyiac init stack.
      proto: tcp
      rule: allow
      to: 0.0.0.0/0

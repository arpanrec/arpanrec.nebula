---
- name: Gitea | Admin token | Fail | gitea_admin_user_username
  ansible.builtin.fail:
      msg: "Variable `gitea_admin_user_username` is required to create admin token."
  when: gitea_admin_user_username is not defined or gitea_admin_user_username is none
      or gitea_admin_user_username | length == 0

- name: Gitea | Admin token | Fail | gitea_admin_token_file_path
  ansible.builtin.fail:
      msg: "Variable `gitea_admin_token_file_path` is required to create admin token."
  when: gitea_admin_token_file_path is not defined or gitea_admin_token_file_path is none
      or gitea_admin_token_file_path | length == 0

- name: Gitea | Admin token | Get Release.
  ansible.builtin.set_fact:
      gitea_version_details: "{{ lookup('arpanrec.nebula.version_db', 'gitea',
          gitea_rv_version=gitea_rv_version) | from_json }}"
  when: gitea_version_details is not defined or gitea_version_details is none
      or gitea_version_details | length == 0

- name: Gitea | Admin token | Get token.
  become: true
  become_user: "{{ gitea_service_user }}"
  ansible.builtin.command:
      argv:
          - "{{ gitea_executable }}"
          - --config
          - "{{ gitea_app_ini_file }}"
          - --custom-path
          - "{{ gitea_custom_directory }}"
          - --work-path
          - "{{ gitea_working_directory }}"
          - admin
          - user
          - generate-access-token
          - --username
          - "{{ gitea_admin_user_username }}"
          - --token-name
          - root_service_token_ansible_generated_{{ now(utc=true, fmt='%Y-%m-%d-%H-%M-%S') }}
          - --scopes
          - all
  changed_when: false
  register: gitea_cli_res_admin_token
  environment:
      PGSSLROOTCERT: "{{ gitea_config_db_pg_ssl_root_cert_file }}"
      PGSSLCERT: "{{ gitea_config_db_pg_ssl_cert_file }}"
      PGSSLKEY: "{{ gitea_config_db_pg_ssl_key_file }}"
      GITEA_CUSTOM: "{{ gitea_custom_directory }}"
      GITEA_WORK_DIR: "{{ gitea_working_directory }}"

- name: Gitea | Admin token | Create directory.
  ansible.builtin.file:
      path: "{{ gitea_admin_token_file_path | dirname }}"
      owner: "root"
      group: "root"
      mode: "0700"
      state: directory

- name: Gitea | Admin token | Write token to file.
  ansible.builtin.copy:
      dest: "{{ gitea_admin_token_file_path }}"
      owner: "root"
      group: "root"
      mode: "0600"
      content: "{{ gitea_cli_res_admin_token.stdout_lines | first | split(' ') | last }}"

- name: Gitea | Admin token | Reset fact.
  ansible.builtin.set_fact:
      gitea_admin_token_file_path: ""

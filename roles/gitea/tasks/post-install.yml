---
- name: Gitea | Post Install | Profile env variables.
  ansible.builtin.set_fact:
      gitea_service_user_profile_env_variables:
          - cert_env: PGSSLROOTCERT
            value: "{{ gitea_service_user_home_directory }}/.postgresql/root.crt"
          - cert_env: PGSSLCERT
            value: "{{ gitea_service_user_home_directory }}/.postgresql/postgresql.crt"
          - cert_env: PGSSLKEY
            value: "{{ gitea_service_user_home_directory }}/.postgresql/postgresql.key"
          - cert_env: GITEA_CUSTOM
            value: "{{ gitea_custom_directory }}"
          - cert_env: GITEA_WORK_DIR
            value: "{{ gitea_working_directory }}"

- name: Gitea | Post Install | Get bashrc file status.
  become: true
  become_user: "{{ gitea_service_user }}"
  ansible.builtin.stat:
      path: "{{ gitea_service_user_home_directory }}/.bashrc"
  register: gitea_service_user_bashrc

- name: Gitea | Post Install | Add postgresql cert environment to bashrc for gitea cli to work.
  become: true
  become_user: "{{ gitea_service_user }}"
  when: gitea_service_user_bashrc.stat.exists
  ansible.builtin.lineinfile:
      path: "{{ gitea_service_user_home_directory }}/.bashrc"
      regexp: '^(export\s+)?{{ item.cert_env }}=.*'
      line: "export {{ item.cert_env }}={{ item.value }}"
      mode: "0600"
      owner: "{{ gitea_service_user }}"
      group: "{{ gitea_service_group }}"
      create: false
      backup: false
      state: present
      insertafter: EOF
      firstmatch: false
  loop: "{{ gitea_service_user_profile_env_variables }}"

- name: Gitea | Post Install | Get zshrc file status.
  become: true
  become_user: "{{ gitea_service_user }}"
  ansible.builtin.stat:
      path: "{{ gitea_service_user_home_directory }}/.zshrc"
  register: gitea_service_user_zshrc

- name: Gitea | Post Install | Add postgresql cert environment to zshrc for gitea cli to work.
  become: true
  become_user: "{{ gitea_service_user }}"
  when: gitea_service_user_zshrc.stat.exists
  ansible.builtin.lineinfile:
      path: "{{ gitea_service_user_home_directory }}/.zshrc"
      regexp: '^(export\s+)?{{ item.cert_env }}=.*'
      line: "export {{ item.cert_env }}={{ item.value }}"
      mode: "0600"
      owner: "{{ gitea_service_user }}"
      group: "{{ gitea_service_group }}"
      create: false
      backup: false
      state: present
      insertafter: EOF
      firstmatch: false
  loop: "{{ gitea_service_user_profile_env_variables }}"

- name: Gitea | Post Install | dependencies
  become: true
  become_user: "{{ gitea_service_user }}"
  ansible.builtin.command:
      argv:
          - "{{ gitea_executable }}"
          - --config
          - "{{ gitea_app_ini_file }}"
          - --custom-path
          - "{{ gitea_custom_directory }}"
          - --work-path
          - "{{ gitea_working_directory }}"
          - admin
          - user
          - list
  changed_when: false
  register: gitea_cli_res_all_user_list

# Stdout reference: DO NOT REMOVE THIS COMMENT
# skipping: [remote] => (item=ID   Username Email          IsActive IsAdmin 2FA)
# skipping: [remote] => (item=1    admin    x@x.x          true     true    false)

- name: Gitea | Post Install | Admin user row
  ansible.builtin.set_fact:
      gitea_admin_user_row_split: "{{ gitea_cli_res_user_row | split(' ') | reject('equalto', '') }}"
  loop: "{{ gitea_cli_res_all_user_list.stdout_lines }}"
  loop_control:
      loop_var: gitea_cli_res_user_row
  when: gitea_admin_user_username == (gitea_cli_res_user_row | split(' ') | reject('equalto', ''))[1]

- name: Gitea | Post Install | Admin user search debug
  when: gitea_admin_user_row_split is defined
  ansible.builtin.debug:
      var: gitea_admin_user_row_split

- name: Gitea | Post Install | Fail if user is not admin
  ansible.builtin.fail:
      msg: "User {{ gitea_admin_user_username }} exists, But not admin
          Might have been created manually.
          Either remove the user or rerun the role with changed admin user variable."
  when: gitea_admin_user_row_split is defined and (not (gitea_admin_user_row_split[4] | bool))

- name: Gitea | Post Install | Admin user exists, resetting the password.
  when: gitea_admin_user_row_split is defined
  become: true
  become_user: "{{ gitea_service_user }}"
  ansible.builtin.command:
      argv:
          - "{{ gitea_executable }}"
          - --config
          - "{{ gitea_app_ini_file }}"
          - --custom-path
          - "{{ gitea_custom_directory }}"
          - --work-path
          - "{{ gitea_working_directory }}"
          - admin
          - user
          - change-password
          - --username
          - "{{ gitea_admin_user_username }}"
          - --password
          - "{{ gitea_admin_user_password }}"
          - --must-change-password=false
  changed_when: true
  register: gitea_cli_res_admin_password_reset

- name: Gitea | Post Install | User password reset result.
  when: gitea_cli_res_admin_password_reset is defined
      and
      (
      gitea_cli_res_admin_password_reset['skipped'] is not defined
      or
      not gitea_cli_res_admin_password_reset['skipped']
      )

  ansible.builtin.debug:
      var: gitea_cli_res_admin_password_reset

- name: Gitea | Post Install | User password reset result.
  when: gitea_cli_res_admin_password_reset is defined
      and
      (
      gitea_cli_res_admin_password_reset['skipped'] is not defined
      or
      not gitea_cli_res_admin_password_reset['skipped']
      )
  ansible.builtin.debug:
      var: gitea_cli_res_admin_password_reset

- name: Gitea | Post Install | Admin user email 'gitea_admin_user_email' missing.
  when: gitea_admin_user_row_split is not defined
      and gitea_admin_user_email is not defined
  ansible.builtin.fail:
      msg: "No admin user found, need to create one but email var
          `gitea_admin_user_email` not provided."

- name: Gitea | Post Install | Admin user does not exists, Creating new user.
  when: gitea_admin_user_row_split is not defined
  become: true
  become_user: "{{ gitea_service_user }}"
  ansible.builtin.command:
      argv:
          - "{{ gitea_executable }}"
          - --config
          - "{{ gitea_app_ini_file }}"
          - --custom-path
          - "{{ gitea_custom_directory }}"
          - --work-path
          - "{{ gitea_working_directory }}"
          - admin
          - user
          - create
          - --username
          - "{{ gitea_admin_user_username }}"
          - --password
          - "{{ gitea_admin_user_password }}"
          - --email
          - "{{ gitea_admin_user_email }}"
          - --admin
          - --must-change-password=false
  changed_when: true
  register: gitea_cli_res_admin_new_user_create

- name: Gitea | Post Install | User create result.
  when: gitea_cli_res_admin_new_user_create is defined
      and
      (
      gitea_cli_res_admin_new_user_create['skipped'] is not defined
      or
      not gitea_cli_res_admin_new_user_create['skipped']
      )
  ansible.builtin.debug:
      var: gitea_cli_res_admin_new_user_create
